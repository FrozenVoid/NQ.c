The speed of algorithm depends 
on minimizing the update of collision
sums(swapc.h): all diagonal collisions are
stored in two arrays(DiagL/R) and each 
queen swap(x,y) (y,x) will 
update('swapc' function)
both collision counts for (x,y) (y,x) 
and the sums of DiagL/DiagR arrays,
without further calculation:
normally a loop through the arrays.

new staged scheme:
windowslide.h accelates search as window
of random cells narrows towards end:
it uses a fixed loop cell[A++] and
a second random variable[B=A+x] inside the
window of random cells.


endsearch.h random cells are swapped with
nearby collision cells() until all collisions
reach 0.
  
A critical factor
reducing 
useless queen swaps is testing
each queen location(in diagonal arrays)
for number 
of collisions and rejecting swaps
where queens have no collisions
(start of main loop in windowslide.h).

