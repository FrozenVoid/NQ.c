The speed of algorithm depends 
on minimizing the update of collision
sums(swapc.h): all diagonal collisions are
stored in two arrays(DiagL/R) and each 
queen swap(x,y) (y,x) will 
update('swapc' function)
both collision counts for (x,y) (y,x) 
and the sums of DiagL/DiagR arrays,
without further calculation:
normally a loop through the arrays.

new staged scheme:
stage1 linear window search that accelarates
first part(until ~50 collisions) 
stage2(endsearch): randomly sample
 cells for good swaps with a nearby 2+ collision cell.(much less optimized now)

A critical factor
reducing 
useless queen swaps is testing
each queen location(in diagonal arrays)
for number 
of collisions and rejecting swaps
where queens have no collisions
(start of main loop).

